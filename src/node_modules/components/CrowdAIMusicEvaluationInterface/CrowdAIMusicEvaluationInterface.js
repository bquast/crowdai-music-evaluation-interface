import React, { Component } from 'react';
import PianoComponent from '../PianoComponent/PianoComponent.js';
import MidiPlayerComponent from '../MidiPlayerComponent/MidiPlayerComponent.js';
import './CrowdAIMusicEvaluationInterface.css';
import { Row, Col } from 'react-simple-flex-grid';
import "react-simple-flex-grid/lib/main.css";
import ReactHintFactory from 'react-hint'
import 'react-hint/css/index.css'
import axios from 'axios';
import SkyLight from 'react-skylight';


const ReactHint = ReactHintFactory(React)
class CrowdAIMusicEvaluationInterface extends Component {
  constructor(props){
    super(props);

    this.state = {
    }
    this.octave = 2;
    this.max_number_of_piano_keys = 80;

    this.resetKeyBoard = this.resetKeyBoard.bind(this);
    this.reloadData = this.reloadData.bind(this);
    this.heartClicked = this.heartClicked.bind(this);
    this.OnPlay = this.OnPlay.bind(this);
    this.renderModal = this.renderModal.bind(this);
    this.resetKeyBoard();
    this.reloadData();

    //Modal States
    this.state.modalLoading = true
    this.state.modalWinProbability = 0.5;

  }
  heartClicked(id){
    var THIS = this;
    this.setState({modalLoading: true});
    THIS.simpleDialog.show();
    axios.post(this.props.base_api_url+"/match/"+this.state.match_id, {
      winner: id
    }).then(function(response){
      if(response.status === 200){
        // Pause both the players if they are playing
        if(THIS.refs.midiplayer1.state.hasPlayedOnce){
          THIS.refs.midiplayer1.pauseSong();
        }
        THIS.refs.midiplayer1.setState(
          {
            isHeartEnabled: false,
            isPlayEnabled: false
          }
        )
        if(THIS.refs.midiplayer0.state.hasPlayedOnce){
          THIS.refs.midiplayer0.pauseSong();
        }
        THIS.refs.midiplayer0.setState(
          {
            isHeartEnabled: false,
            isPlayEnabled: false
          }
        )
        //Reset Keyboard
        THIS.resetKeyBoard();
        THIS.reloadData();

        THIS.setState({modalWinProbability: response.data.prob_win, modalLoading: false})
        console.log(response);
      }else{
        // TODO : Add error handling
      }
    }).catch(function(error){
      console.log(error);
    })
  }
  reloadData(){
    var THIS = this;
    this.loadingData = true;
    // THIS.refs.midiplayer0.setState({isLoading: true});
    // THIS.refs.midiplayer1.setState({isLoading: true});
    var _state = this.state;
    _state.song1 = false;
    _state.song2 = false;
    axios.get(this.props.base_api_url+"/match")
    .then(function(response){
      THIS.loadingData = false;
      THIS.setState({match_id: response.data.match_id})
      var candidate_1 = response.data.candidate_1;
      axios.get(candidate_1)
      .then(function(response){
        THIS.refs.midiplayer0.setState({submission_id: response.data.key})
        THIS.refs.midiplayer0.load_data_uri(response.data.dataUri);
      })
      var candidate_2 = response.data.candidate_2;
      axios.get(candidate_2)
      .then(function(response){
        THIS.refs.midiplayer1.setState({submission_id: response.data.key})
        THIS.refs.midiplayer1.load_data_uri(response.data.dataUri);
      })

    })
    .catch(function(error){
      console.log(error);
    })
  }
  resetKeyBoard(){
    var _new_state = {}
    for(var i = 0; i<this.max_number_of_piano_keys; i++){
      _new_state["key_"+i] = 0;
    }
    this.setState(_new_state);
  }
  OnNoteOn(noteNumber){
    if(noteNumber > this.octave*2 + this.max_number_of_piano_keys){
      return;
    }
    let key = "key_"+ (noteNumber - this.octave*12);
    let _new_state = {};
    _new_state[key] = 1;
    this.setState(_new_state);
  }
  OnNoteOff(noteNumber){
    if(noteNumber > this.octave*2 + this.max_number_of_piano_keys){
      return;
    }
    let key = "key_"+ (noteNumber - this.octave*12);
    let _new_state = {};
    _new_state[key] = 0;
    this.setState(_new_state);
  }
  OnPlay(playerName){
    if(playerName === 0){
      if(this.refs.midiplayer1.state.hasPlayedOnce){
        this.refs.midiplayer1.pauseSong();
      }
      this.refs.midiplayer0.playSong();
    }else{
      if(this.refs.midiplayer0.state.hasPlayedOnce){
        this.refs.midiplayer0.pauseSong();
      }
      this.refs.midiplayer1.playSong();
    }
    //Stop all instances
    // this.refs.midiplayer0.pauseSong();
    // this.refs.midiplayer1.pauseSong();
    // midiplayer.playSong();
  }
  renderModal(){
    var THIS=this;
    if(this.state.modalLoading){
      return(
        <Row gutter={10} align="middle" justify="center">
          <div className="crowdai_interface_loader"/>
        </Row>
      )
    }else{
      return(
        <div>
          <Row gutter={10} align="middle" justify="center">
            <div style={{textAlign:"center"}}>
              Your choice had a probability of <strong> {this.state.modalWinProbability} </strong> to be chosen over
              the other song. <br/>
            </div>
          </Row>
          <Row gutter={10} align="middle" justify="center">
            <button className="crowdai_music_challenge_btns" onClick={()=>{this.simpleDialog.hide()}}>
              Load More Songs
            </button>
          </Row>
        </div>
        )
        }
    }
  render() {
    return (
      <div>
        <SkyLight
          hideOnOverlayClicked
          ref={ref => this.simpleDialog = ref}
        title="">
          {this.renderModal()}
        </SkyLight>
        <ReactHint events delay={100} />
        <Row className="CrowdAIMusicEvaluationInterfaceWrapper" justify="left">
          <Col span={10} offset={1}>
            <Row gutter={10} align="middle" justify="center">
              <Col xs={11} sm={6} md={6} lg={6} xl={6}>
                <MidiPlayerComponent
                  ref="midiplayer0"
                  playerName={0}
                  dataUri={this.props.song1}
                  onNoteOn={this.OnNoteOn.bind(this)}
                  onNoteOff={this.OnNoteOff.bind(this)}
                  onPlay={this.OnPlay}
                  onHeartClicked={this.heartClicked}
                  resetKeyBoard={this.resetKeyBoard}
                />
              </Col>
              <Col xs={11} sm={6} md={6} lg={6} xl={6}>
                <MidiPlayerComponent
                  ref="midiplayer1"
                  playerName={1}
                  dataUri={this.props.song1}
                  onNoteOn={this.OnNoteOn.bind(this)}
                  onNoteOff={this.OnNoteOff.bind(this)}
                  onPlay={this.OnPlay}
                  onHeartClicked={this.heartClicked}
                  resetKeyBoard={this.resetKeyBoard}
                />
              </Col>
            </Row>
            <Row align="middle" justify="center">
              <Col span={12}>
                <PianoComponent key_states={this.state} noFloor />
              </Col>
            </Row>
          </Col>
        </Row>
      </div>
    );
  }
}
CrowdAIMusicEvaluationInterface.defaultProps = {
  base_api_url: "http://grader.crowdai.org:9271",
}

export default CrowdAIMusicEvaluationInterface;
